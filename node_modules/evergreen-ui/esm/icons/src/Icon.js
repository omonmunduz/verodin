import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useTheme } from '../../theme';
/**
 * This implementation is a remix of the Icon component in Blueprintjs:
 * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15
 * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE
 */

var TreeShakeableIcon = forwardRef(function (_ref, ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 16 : _ref$size,
      name = _ref.name,
      title = _ref.title,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      svgPaths16 = _ref.svgPaths16,
      svgPaths20 = _ref.svgPaths20,
      svgProps = _objectWithoutProperties(_ref, ["color", "size", "name", "title", "style", "svgPaths16", "svgPaths20"]);

  var theme = useTheme();
  var SIZE_STANDARD = 16;
  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size

  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;
  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;
  var paths = pathStrings.map(function (d, i) {
    return (// eslint-disable-next-line react/no-array-index-key
      React.createElement("path", {
        key: i,
        d: d,
        fillRule: "evenodd"
      })
    );
  });
  var viewBox = "0 0 ".concat(pixelGridSize, " ").concat(pixelGridSize);

  if (color) {
    style = _objectSpread({}, style, {
      fill: theme.getIconColor(color)
    });
  }

  return React.createElement(Box, _extends({
    is: "svg"
  }, svgProps, {
    "data-icon": name,
    style: style,
    width: size,
    height: size,
    viewBox: viewBox,
    innerRef: ref
  }), title && React.createElement("title", null, title), paths);
});
TreeShakeableIcon.propTypes = {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number,

  /**
   * Name of the icon
   */
  name: PropTypes.string,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string,

  /**
   * CSS style properties.
   */
  style: PropTypes.object,
  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,
  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired
};
export default TreeShakeableIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbi5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsImZvcndhcmRSZWYiLCJQcm9wVHlwZXMiLCJCb3giLCJ1c2VUaGVtZSIsIlRyZWVTaGFrZWFibGVJY29uIiwicmVmIiwiY29sb3IiLCJzaXplIiwibmFtZSIsInRpdGxlIiwic3R5bGUiLCJzdmdQYXRoczE2Iiwic3ZnUGF0aHMyMCIsInN2Z1Byb3BzIiwidGhlbWUiLCJTSVpFX1NUQU5EQVJEIiwiU0laRV9MQVJHRSIsInBpeGVsR3JpZFNpemUiLCJwYXRoU3RyaW5ncyIsInBhdGhzIiwibWFwIiwiZCIsImkiLCJ2aWV3Qm94IiwiZmlsbCIsImdldEljb25Db2xvciIsInByb3BUeXBlcyIsInN0cmluZyIsIm51bWJlciIsIm9iamVjdCIsImFycmF5T2YiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFVBQWhCLFFBQWtDLE9BQWxDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsUUFBaEI7QUFDQSxTQUFTQyxRQUFULFFBQXlCLGFBQXpCO0FBRUE7Ozs7OztBQU1BLElBQU1DLGlCQUFpQixHQUFHSixVQUFVLENBQ2xDLGdCQVdFSyxHQVhGLEVBWUs7QUFBQSx3QkFWREMsS0FVQztBQUFBLE1BVkRBLEtBVUMsMkJBVk8sY0FVUDtBQUFBLHVCQVREQyxJQVNDO0FBQUEsTUFUREEsSUFTQywwQkFUTSxFQVNOO0FBQUEsTUFSREMsSUFRQyxRQVJEQSxJQVFDO0FBQUEsTUFQREMsS0FPQyxRQVBEQSxLQU9DO0FBQUEsd0JBTkRDLEtBTUM7QUFBQSxNQU5EQSxLQU1DLDJCQU5PLEVBTVA7QUFBQSxNQUxEQyxVQUtDLFFBTERBLFVBS0M7QUFBQSxNQUpEQyxVQUlDLFFBSkRBLFVBSUM7QUFBQSxNQUhFQyxRQUdGOztBQUNILE1BQU1DLEtBQUssR0FBR1gsUUFBUSxFQUF0QjtBQUNBLE1BQU1ZLGFBQWEsR0FBRyxFQUF0QjtBQUNBLE1BQU1DLFVBQVUsR0FBRyxFQUFuQixDQUhHLENBS0g7O0FBQ0EsTUFBTUMsYUFBYSxHQUFHVixJQUFJLElBQUlTLFVBQVIsR0FBcUJBLFVBQXJCLEdBQWtDRCxhQUF4RDtBQUNBLE1BQU1HLFdBQVcsR0FDZkQsYUFBYSxLQUFLRixhQUFsQixHQUFrQ0osVUFBbEMsR0FBK0NDLFVBRGpEO0FBRUEsTUFBTU8sS0FBSyxHQUFHRCxXQUFXLENBQUNFLEdBQVosQ0FBZ0IsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FDNUI7QUFDQTtBQUFNLFFBQUEsR0FBRyxFQUFFQSxDQUFYO0FBQWMsUUFBQSxDQUFDLEVBQUVELENBQWpCO0FBQW9CLFFBQUEsUUFBUSxFQUFDO0FBQTdCO0FBRjRCO0FBQUEsR0FBaEIsQ0FBZDtBQUtBLE1BQU1FLE9BQU8saUJBQVVOLGFBQVYsY0FBMkJBLGFBQTNCLENBQWI7O0FBRUEsTUFBSVgsS0FBSixFQUFXO0FBQ1RJLElBQUFBLEtBQUsscUJBQVFBLEtBQVI7QUFBZWMsTUFBQUEsSUFBSSxFQUFFVixLQUFLLENBQUNXLFlBQU4sQ0FBbUJuQixLQUFuQjtBQUFyQixNQUFMO0FBQ0Q7O0FBRUQsU0FDRSxvQkFBQyxHQUFEO0FBQ0UsSUFBQSxFQUFFLEVBQUM7QUFETCxLQUVNTyxRQUZOO0FBR0UsaUJBQVdMLElBSGI7QUFJRSxJQUFBLEtBQUssRUFBRUUsS0FKVDtBQUtFLElBQUEsS0FBSyxFQUFFSCxJQUxUO0FBTUUsSUFBQSxNQUFNLEVBQUVBLElBTlY7QUFPRSxJQUFBLE9BQU8sRUFBRWdCLE9BUFg7QUFRRSxJQUFBLFFBQVEsRUFBRWxCO0FBUlosTUFVR0ksS0FBSyxJQUFJLG1DQUFRQSxLQUFSLENBVlosRUFXR1UsS0FYSCxDQURGO0FBZUQsQ0FoRGlDLENBQXBDO0FBbURBZixpQkFBaUIsQ0FBQ3NCLFNBQWxCLEdBQThCO0FBQzVCOzs7QUFHQXBCLEVBQUFBLEtBQUssRUFBRUwsU0FBUyxDQUFDMEIsTUFKVzs7QUFNNUI7Ozs7O0FBS0FwQixFQUFBQSxJQUFJLEVBQUVOLFNBQVMsQ0FBQzJCLE1BWFk7O0FBYTVCOzs7QUFHQXBCLEVBQUFBLElBQUksRUFBRVAsU0FBUyxDQUFDMEIsTUFoQlk7O0FBa0I1Qjs7Ozs7O0FBTUFsQixFQUFBQSxLQUFLLEVBQUVSLFNBQVMsQ0FBQzBCLE1BeEJXOztBQTBCNUI7OztBQUdBakIsRUFBQUEsS0FBSyxFQUFFVCxTQUFTLENBQUM0QixNQTdCVztBQStCNUJsQixFQUFBQSxVQUFVLEVBQUVWLFNBQVMsQ0FBQzZCLE9BQVYsQ0FBa0I3QixTQUFTLENBQUMwQixNQUE1QixFQUFvQ0ksVUEvQnBCO0FBaUM1Qm5CLEVBQUFBLFVBQVUsRUFBRVgsU0FBUyxDQUFDNkIsT0FBVixDQUFrQjdCLFNBQVMsQ0FBQzBCLE1BQTVCLEVBQW9DSTtBQWpDcEIsQ0FBOUI7QUFvQ0EsZUFBZTNCLGlCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcblxuLyoqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGEgcmVtaXggb2YgdGhlIEljb24gY29tcG9uZW50IGluIEJsdWVwcmludGpzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGFudGlyL2JsdWVwcmludC9ibG9iLzgxM2U5M2YyL3BhY2thZ2VzL2NvcmUvc3JjL2NvbXBvbmVudHMvaWNvbi9pY29uLnRzeCNMMTVcbiAqIFJlZmVyIHRvIHRoZSBMSUNFTlNFIGZvciBCbHVlcHJpbnRKUyBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvZGV2ZWxvcC9MSUNFTlNFXG4gKi9cblxuY29uc3QgVHJlZVNoYWtlYWJsZUljb24gPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgY29sb3IgPSAnY3VycmVudENvbG9yJyxcbiAgICAgIHNpemUgPSAxNixcbiAgICAgIG5hbWUsXG4gICAgICB0aXRsZSxcbiAgICAgIHN0eWxlID0ge30sXG4gICAgICBzdmdQYXRoczE2LFxuICAgICAgc3ZnUGF0aHMyMCxcbiAgICAgIC4uLnN2Z1Byb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpXG4gICAgY29uc3QgU0laRV9TVEFOREFSRCA9IDE2XG4gICAgY29uc3QgU0laRV9MQVJHRSA9IDIwXG5cbiAgICAvLyBDaG9vc2Ugd2hpY2ggcGl4ZWwgZ3JpZCBpcyBtb3N0IGFwcHJvcHJpYXRlIGZvciBnaXZlbiBpY29uIHNpemVcbiAgICBjb25zdCBwaXhlbEdyaWRTaXplID0gc2l6ZSA+PSBTSVpFX0xBUkdFID8gU0laRV9MQVJHRSA6IFNJWkVfU1RBTkRBUkRcbiAgICBjb25zdCBwYXRoU3RyaW5ncyA9XG4gICAgICBwaXhlbEdyaWRTaXplID09PSBTSVpFX1NUQU5EQVJEID8gc3ZnUGF0aHMxNiA6IHN2Z1BhdGhzMjBcbiAgICBjb25zdCBwYXRocyA9IHBhdGhTdHJpbmdzLm1hcCgoZCwgaSkgPT4gKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgPHBhdGgga2V5PXtpfSBkPXtkfSBmaWxsUnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICkpXG5cbiAgICBjb25zdCB2aWV3Qm94ID0gYDAgMCAke3BpeGVsR3JpZFNpemV9ICR7cGl4ZWxHcmlkU2l6ZX1gXG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHN0eWxlID0geyAuLi5zdHlsZSwgZmlsbDogdGhlbWUuZ2V0SWNvbkNvbG9yKGNvbG9yKSB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3hcbiAgICAgICAgaXM9XCJzdmdcIlxuICAgICAgICB7Li4uc3ZnUHJvcHN9XG4gICAgICAgIGRhdGEtaWNvbj17bmFtZX1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICB3aWR0aD17c2l6ZX1cbiAgICAgICAgaGVpZ2h0PXtzaXplfVxuICAgICAgICB2aWV3Qm94PXt2aWV3Qm94fVxuICAgICAgICBpbm5lclJlZj17cmVmfVxuICAgICAgPlxuICAgICAgICB7dGl0bGUgJiYgPHRpdGxlPnt0aXRsZX08L3RpdGxlPn1cbiAgICAgICAge3BhdGhzfVxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9XG4pXG5cblRyZWVTaGFrZWFibGVJY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbG9yIG9mIGljb24uIEVxdWl2YWxlbnQgdG8gc2V0dGluZyBDU1MgYGZpbGxgIHByb3BlcnR5LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGljb24sIGluIHBpeGVscy5cbiAgICogQmx1ZXByaW50IGNvbnRhaW5zIDE2cHggYW5kIDIwcHggU1ZHIGljb24gaW1hZ2VzLFxuICAgKiBhbmQgY2hvb3NlcyB0aGUgYXBwcm9wcmlhdGUgcmVzb2x1dGlvbiBiYXNlZCBvbiB0aGlzIHByb3AuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBpY29uXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBzdHJpbmcuXG4gICAqIEJyb3dzZXJzIHVzdWFsbHkgcmVuZGVyIHRoaXMgYXMgYSB0b29sdGlwIG9uIGhvdmVyLCB3aGVyZWFzIHNjcmVlblxuICAgKiByZWFkZXJzIHdpbGwgdXNlIGl0IGZvciBhdXJhbCBmZWVkYmFjay5cbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpcyBzZXQgdG8gdGhlIGljb24ncyBuYW1lIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENTUyBzdHlsZSBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgc3ZnUGF0aHMxNjogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZykuaXNSZXF1aXJlZCxcblxuICBzdmdQYXRoczIwOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKS5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWVTaGFrZWFibGVJY29uXG4iXX0=