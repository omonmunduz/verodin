"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _theme = require("../../theme");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This implementation is a remix of the Icon component in Blueprintjs:
 * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15
 * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE
 */
var TreeShakeableIcon = (0, _react.forwardRef)(function (_ref, ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 16 : _ref$size,
      name = _ref.name,
      title = _ref.title,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      svgPaths16 = _ref.svgPaths16,
      svgPaths20 = _ref.svgPaths20,
      svgProps = (0, _objectWithoutProperties2["default"])(_ref, ["color", "size", "name", "title", "style", "svgPaths16", "svgPaths20"]);
  var theme = (0, _theme.useTheme)();
  var SIZE_STANDARD = 16;
  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size

  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;
  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;
  var paths = pathStrings.map(function (d, i) {
    return (// eslint-disable-next-line react/no-array-index-key
      _react["default"].createElement("path", {
        key: i,
        d: d,
        fillRule: "evenodd"
      })
    );
  });
  var viewBox = "0 0 ".concat(pixelGridSize, " ").concat(pixelGridSize);

  if (color) {
    style = _objectSpread({}, style, {
      fill: theme.getIconColor(color)
    });
  }

  return _react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    is: "svg"
  }, svgProps, {
    "data-icon": name,
    style: style,
    width: size,
    height: size,
    viewBox: viewBox,
    innerRef: ref
  }), title && _react["default"].createElement("title", null, title), paths);
});
TreeShakeableIcon.propTypes = {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: _propTypes["default"].string,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: _propTypes["default"].number,

  /**
   * Name of the icon
   */
  name: _propTypes["default"].string,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: _propTypes["default"].string,

  /**
   * CSS style properties.
   */
  style: _propTypes["default"].object,
  svgPaths16: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,
  svgPaths20: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired
};
var _default = TreeShakeableIcon;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbi5qcyJdLCJuYW1lcyI6WyJUcmVlU2hha2VhYmxlSWNvbiIsInJlZiIsImNvbG9yIiwic2l6ZSIsIm5hbWUiLCJ0aXRsZSIsInN0eWxlIiwic3ZnUGF0aHMxNiIsInN2Z1BhdGhzMjAiLCJzdmdQcm9wcyIsInRoZW1lIiwiU0laRV9TVEFOREFSRCIsIlNJWkVfTEFSR0UiLCJwaXhlbEdyaWRTaXplIiwicGF0aFN0cmluZ3MiLCJwYXRocyIsIm1hcCIsImQiLCJpIiwidmlld0JveCIsImZpbGwiLCJnZXRJY29uQ29sb3IiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJudW1iZXIiLCJvYmplY3QiLCJhcnJheU9mIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBRUE7Ozs7O0FBTUEsSUFBTUEsaUJBQWlCLEdBQUcsdUJBQ3hCLGdCQVdFQyxHQVhGLEVBWUs7QUFBQSx3QkFWREMsS0FVQztBQUFBLE1BVkRBLEtBVUMsMkJBVk8sY0FVUDtBQUFBLHVCQVREQyxJQVNDO0FBQUEsTUFUREEsSUFTQywwQkFUTSxFQVNOO0FBQUEsTUFSREMsSUFRQyxRQVJEQSxJQVFDO0FBQUEsTUFQREMsS0FPQyxRQVBEQSxLQU9DO0FBQUEsd0JBTkRDLEtBTUM7QUFBQSxNQU5EQSxLQU1DLDJCQU5PLEVBTVA7QUFBQSxNQUxEQyxVQUtDLFFBTERBLFVBS0M7QUFBQSxNQUpEQyxVQUlDLFFBSkRBLFVBSUM7QUFBQSxNQUhFQyxRQUdGO0FBQ0gsTUFBTUMsS0FBSyxHQUFHLHNCQUFkO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLEVBQW5CLENBSEcsQ0FLSDs7QUFDQSxNQUFNQyxhQUFhLEdBQUdWLElBQUksSUFBSVMsVUFBUixHQUFxQkEsVUFBckIsR0FBa0NELGFBQXhEO0FBQ0EsTUFBTUcsV0FBVyxHQUNmRCxhQUFhLEtBQUtGLGFBQWxCLEdBQWtDSixVQUFsQyxHQUErQ0MsVUFEakQ7QUFFQSxNQUFNTyxLQUFLLEdBQUdELFdBQVcsQ0FBQ0UsR0FBWixDQUFnQixVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxXQUM1QjtBQUNBO0FBQU0sUUFBQSxHQUFHLEVBQUVBLENBQVg7QUFBYyxRQUFBLENBQUMsRUFBRUQsQ0FBakI7QUFBb0IsUUFBQSxRQUFRLEVBQUM7QUFBN0I7QUFGNEI7QUFBQSxHQUFoQixDQUFkO0FBS0EsTUFBTUUsT0FBTyxpQkFBVU4sYUFBVixjQUEyQkEsYUFBM0IsQ0FBYjs7QUFFQSxNQUFJWCxLQUFKLEVBQVc7QUFDVEksSUFBQUEsS0FBSyxxQkFBUUEsS0FBUjtBQUFlYyxNQUFBQSxJQUFJLEVBQUVWLEtBQUssQ0FBQ1csWUFBTixDQUFtQm5CLEtBQW5CO0FBQXJCLE1BQUw7QUFDRDs7QUFFRCxTQUNFLGdDQUFDLGlCQUFEO0FBQ0UsSUFBQSxFQUFFLEVBQUM7QUFETCxLQUVNTyxRQUZOO0FBR0UsaUJBQVdMLElBSGI7QUFJRSxJQUFBLEtBQUssRUFBRUUsS0FKVDtBQUtFLElBQUEsS0FBSyxFQUFFSCxJQUxUO0FBTUUsSUFBQSxNQUFNLEVBQUVBLElBTlY7QUFPRSxJQUFBLE9BQU8sRUFBRWdCLE9BUFg7QUFRRSxJQUFBLFFBQVEsRUFBRWxCO0FBUlosTUFVR0ksS0FBSyxJQUFJLCtDQUFRQSxLQUFSLENBVlosRUFXR1UsS0FYSCxDQURGO0FBZUQsQ0FoRHVCLENBQTFCO0FBbURBZixpQkFBaUIsQ0FBQ3NCLFNBQWxCLEdBQThCO0FBQzVCOzs7QUFHQXBCLEVBQUFBLEtBQUssRUFBRXFCLHNCQUFVQyxNQUpXOztBQU01Qjs7Ozs7QUFLQXJCLEVBQUFBLElBQUksRUFBRW9CLHNCQUFVRSxNQVhZOztBQWE1Qjs7O0FBR0FyQixFQUFBQSxJQUFJLEVBQUVtQixzQkFBVUMsTUFoQlk7O0FBa0I1Qjs7Ozs7O0FBTUFuQixFQUFBQSxLQUFLLEVBQUVrQixzQkFBVUMsTUF4Qlc7O0FBMEI1Qjs7O0FBR0FsQixFQUFBQSxLQUFLLEVBQUVpQixzQkFBVUcsTUE3Qlc7QUErQjVCbkIsRUFBQUEsVUFBVSxFQUFFZ0Isc0JBQVVJLE9BQVYsQ0FBa0JKLHNCQUFVQyxNQUE1QixFQUFvQ0ksVUEvQnBCO0FBaUM1QnBCLEVBQUFBLFVBQVUsRUFBRWUsc0JBQVVJLE9BQVYsQ0FBa0JKLHNCQUFVQyxNQUE1QixFQUFvQ0k7QUFqQ3BCLENBQTlCO2VBb0NlNUIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuXG4vKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYSByZW1peCBvZiB0aGUgSWNvbiBjb21wb25lbnQgaW4gQmx1ZXByaW50anM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvODEzZTkzZjIvcGFja2FnZXMvY29yZS9zcmMvY29tcG9uZW50cy9pY29uL2ljb24udHN4I0wxNVxuICogUmVmZXIgdG8gdGhlIExJQ0VOU0UgZm9yIEJsdWVwcmludEpTIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxhbnRpci9ibHVlcHJpbnQvYmxvYi9kZXZlbG9wL0xJQ0VOU0VcbiAqL1xuXG5jb25zdCBUcmVlU2hha2VhYmxlSWNvbiA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBjb2xvciA9ICdjdXJyZW50Q29sb3InLFxuICAgICAgc2l6ZSA9IDE2LFxuICAgICAgbmFtZSxcbiAgICAgIHRpdGxlLFxuICAgICAgc3R5bGUgPSB7fSxcbiAgICAgIHN2Z1BhdGhzMTYsXG4gICAgICBzdmdQYXRoczIwLFxuICAgICAgLi4uc3ZnUHJvcHNcbiAgICB9LFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKClcbiAgICBjb25zdCBTSVpFX1NUQU5EQVJEID0gMTZcbiAgICBjb25zdCBTSVpFX0xBUkdFID0gMjBcblxuICAgIC8vIENob29zZSB3aGljaCBwaXhlbCBncmlkIGlzIG1vc3QgYXBwcm9wcmlhdGUgZm9yIGdpdmVuIGljb24gc2l6ZVxuICAgIGNvbnN0IHBpeGVsR3JpZFNpemUgPSBzaXplID49IFNJWkVfTEFSR0UgPyBTSVpFX0xBUkdFIDogU0laRV9TVEFOREFSRFxuICAgIGNvbnN0IHBhdGhTdHJpbmdzID1cbiAgICAgIHBpeGVsR3JpZFNpemUgPT09IFNJWkVfU1RBTkRBUkQgPyBzdmdQYXRoczE2IDogc3ZnUGF0aHMyMFxuICAgIGNvbnN0IHBhdGhzID0gcGF0aFN0cmluZ3MubWFwKChkLCBpKSA9PiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICA8cGF0aCBrZXk9e2l9IGQ9e2R9IGZpbGxSdWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgKSlcblxuICAgIGNvbnN0IHZpZXdCb3ggPSBgMCAwICR7cGl4ZWxHcmlkU2l6ZX0gJHtwaXhlbEdyaWRTaXplfWBcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgc3R5bGUgPSB7IC4uLnN0eWxlLCBmaWxsOiB0aGVtZS5nZXRJY29uQ29sb3IoY29sb3IpIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBpcz1cInN2Z1wiXG4gICAgICAgIHsuLi5zdmdQcm9wc31cbiAgICAgICAgZGF0YS1pY29uPXtuYW1lfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIHdpZHRoPXtzaXplfVxuICAgICAgICBoZWlnaHQ9e3NpemV9XG4gICAgICAgIHZpZXdCb3g9e3ZpZXdCb3h9XG4gICAgICAgIGlubmVyUmVmPXtyZWZ9XG4gICAgICA+XG4gICAgICAgIHt0aXRsZSAmJiA8dGl0bGU+e3RpdGxlfTwvdGl0bGU+fVxuICAgICAgICB7cGF0aHN9XG4gICAgICA8L0JveD5cbiAgICApXG4gIH1cbilcblxuVHJlZVNoYWtlYWJsZUljb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ29sb3Igb2YgaWNvbi4gRXF1aXZhbGVudCB0byBzZXR0aW5nIENTUyBgZmlsbGAgcHJvcGVydHkuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaWNvbiwgaW4gcGl4ZWxzLlxuICAgKiBCbHVlcHJpbnQgY29udGFpbnMgMTZweCBhbmQgMjBweCBTVkcgaWNvbiBpbWFnZXMsXG4gICAqIGFuZCBjaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSByZXNvbHV0aW9uIGJhc2VkIG9uIHRoaXMgcHJvcC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGljb25cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIHN0cmluZy5cbiAgICogQnJvd3NlcnMgdXN1YWxseSByZW5kZXIgdGhpcyBhcyBhIHRvb2x0aXAgb24gaG92ZXIsIHdoZXJlYXMgc2NyZWVuXG4gICAqIHJlYWRlcnMgd2lsbCB1c2UgaXQgZm9yIGF1cmFsIGZlZWRiYWNrLlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byB0aGUgaWNvbidzIG5hbWUgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ1NTIHN0eWxlIHByb3BlcnRpZXMuXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICBzdmdQYXRoczE2OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKS5pc1JlcXVpcmVkLFxuXG4gIHN2Z1BhdGhzMjA6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJlZVNoYWtlYWJsZUljb25cbiJdfQ==