"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTextColor = exports.getFontFamily = exports.getParagraphStyle = exports.getTextStyle = exports.getHeadingStyle = exports.getIconForIntent = exports.getIconColor = exports.getElevation = exports.getBackground = exports.getIconSizeForIconButton = exports.getIconSizeForSelect = exports.getIconSizeForInput = exports.getIconSizeForButton = exports.getTextSizeForControlHeight = exports.getBorderRadiusForControlHeight = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _constants = require("../../../../constants");

var _themedProperty = _interopRequireDefault(require("../utils/themedProperty"));

var _foundationalStyles = require("../foundational-styles");

var _typography = require("../typography");

var _icons = require("../../../../icons");

/**
 * Controls include:
 * - Button
 * - IconButton
 * - TextInput
 * @param {number} height
 * @return {number} border radius
 */
var getBorderRadiusForControlHeight = function getBorderRadiusForControlHeight(height) {
  if (height <= 40) return 3;
  return 4;
};
/**
 * Get the text size for a control with a certain height.
 * @param {number} height
 * @return {number} text size of the control height.
 */


exports.getBorderRadiusForControlHeight = getBorderRadiusForControlHeight;

var getTextSizeForControlHeight = function getTextSizeForControlHeight(height) {
  if (height <= 24) return 300;
  if (height <= 28) return 300;
  if (height <= 32) return 300;
  if (height <= 36) return 400;
  if (height <= 40) return 400;
  return 500;
};
/**
 * Get the size for a icon in a Button with a certain height.
 * @param {number} height
 * @return {number} icon size
 */


exports.getTextSizeForControlHeight = getTextSizeForControlHeight;

var getIconSizeForButton = function getIconSizeForButton(height) {
  if (height <= 28) return 12;
  if (height <= 32) return 12;
  if (height <= 40) return 16;
  if (height <= 48) return 18;
  return 20;
}; // Use the same for input components.


exports.getIconSizeForButton = getIconSizeForButton;
var getIconSizeForInput = getIconSizeForButton;
exports.getIconSizeForInput = getIconSizeForInput;
var getIconSizeForSelect = getIconSizeForButton;
/**
 * Get the size for a icon in a IconButton with a certain height.
 * @param {number} height
 * @return {number} icon size
 */

exports.getIconSizeForSelect = getIconSizeForSelect;

var getIconSizeForIconButton = function getIconSizeForIconButton(height) {
  if (height <= 28) return 12;
  if (height <= 32) return 14; // Slightly bigger than getIconSizeForButton

  if (height <= 40) return 16;
  if (height <= 48) return 18;
  return 20;
};
/**
 * Get background property.
 * @param {string} background
 * @return {string} background property.
 */


exports.getIconSizeForIconButton = getIconSizeForIconButton;

var getBackground = function getBackground(background) {
  /**
   * Return one of theme presets or the original value.
   */
  return (0, _themedProperty["default"])(_foundationalStyles.colors.background, background);
};
/**
 * Get box-shadow (elevation).
 * @param {string} level — level of elevation.
 * @return {string} elevation box-shadow.
 */


exports.getBackground = getBackground;

var getElevation = function getElevation(level) {
  /**
   * There is no fallback, undefined will be returned.
   */
  return _foundationalStyles.elevations[level];
};
/**
 * Get the color for an icon.
 * @param {string} color
 * @return {string} color of the icon
 */


exports.getElevation = getElevation;

var getIconColor = function getIconColor(color) {
  /**
   * Check if there is a preset in the theme for the icon color.
   */
  return (0, _themedProperty["default"])(_foundationalStyles.colors.icon, color);
};
/**
 * Get the properties for an icon based on the intent.
 * @param {Intent} intent
 * @return {Object} properties
 */


exports.getIconColor = getIconColor;

var getIconForIntent = function getIconForIntent(intent) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  switch (intent) {
    case _constants.Intent.SUCCESS:
      return _react["default"].createElement(_icons.TickCircleIcon, (0, _extends2["default"])({
        color: "success"
      }, props));

    case _constants.Intent.DANGER:
      return _react["default"].createElement(_icons.ErrorIcon, (0, _extends2["default"])({
        color: "danger"
      }, props));

    case _constants.Intent.WARNING:
      return _react["default"].createElement(_icons.WarningSignIcon, (0, _extends2["default"])({
        color: "warning"
      }, props));

    case _constants.Intent.NONE:
    default:
      return _react["default"].createElement(_icons.InfoSignIcon, (0, _extends2["default"])({
        color: "info"
      }, props));
  }
};
/**
 * Heading styles.
 * @param {number} size - 100–900. 500 is default.
 * @return {Object} heading style.
 */


exports.getIconForIntent = getIconForIntent;

var getHeadingStyle = function getHeadingStyle(size) {
  return (0, _themedProperty["default"])(_typography.headings, String(size));
};
/**
 * Text styles for single line text.
 * This is used in the Text component. The Text component is used by:
 * - Small
 * - Strong
 * - Code
 * - ListItem
 * - Label
 * @param {number} size - 300–500. 400 is default.
 * @return {Object} text style.
 */


exports.getHeadingStyle = getHeadingStyle;

var getTextStyle = function getTextStyle(size) {
  return (0, _themedProperty["default"])(_typography.text, String(size));
};
/**
 * Text styles for paragraphs (multi line text).
 * This is used in the Paragraph.
 * @param {number} size - 300–500. 400 is default.
 * @return {Object} text style.
 */


exports.getTextStyle = getTextStyle;

var getParagraphStyle = function getParagraphStyle(size) {
  return (0, _themedProperty["default"])(_typography.paragraph, String(size));
};
/**
 * Get the font family. This is used to override the font family.
 * @param {string} fontFamily
 * @return {string} font family
 */


exports.getParagraphStyle = getParagraphStyle;

var getFontFamily = function getFontFamily(fontFamily) {
  /**
   * Allow for passing in a custom fontFamily not in the theme.
   */
  return (0, _themedProperty["default"])(_typography.fontFamilies, fontFamily);
};
/**
 * Get the text color. This is used to override the color.
 * @param {string} fontFamily
 * @return {string} font family
 */


exports.getFontFamily = getFontFamily;

var getTextColor = function getTextColor(color) {
  /**
   * Allow for passing in a custom text color not in the theme.
   */
  return (0, _themedProperty["default"])(_foundationalStyles.colors.text, color);
};

exports.getTextColor = getTextColor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,