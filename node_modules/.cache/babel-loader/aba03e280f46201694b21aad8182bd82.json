{"ast":null,"code":"var _jsxFileName = \"/Users/omurbeknazarov/Desktop/verodin/src/components/TableComponent.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { PeopleContext } from '../contexts/PeopleContextProvider';\nimport { Link } from 'react-router-dom';\nimport '../index.css';\nimport { Table, SearchInput } from 'evergreen-ui';\n\nconst TableComponent = () => {\n  const {\n    data\n  } = useContext(PeopleContext); // get json data from PeopleContext provider\n\n  const [searchTerm, setSearchTerm] = useState(\"\"); // initialize search term state and its method\n\n  const [searchResults, setSearchResults] = useState([]); // what data to display based on search\n\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  }; // use setSearchTerm to set searchTerm based on user's input\n\n\n  useEffect(() => {\n    const results = data.filter(person => person.first_name.toLowerCase().includes(searchTerm));\n    setSearchResults(results);\n  }, [data, searchTerm]); // this runs before first mounting and rerenders the component only if content in {data} or {searchTerm} get changed\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-component\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    elevation: 2,\n    border: \"muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, \" \", /*#__PURE__*/React.createElement(SearchInput, {\n    placeholder: \"filter name ...\",\n    onChange: handleChange,\n    value: searchTerm,\n    width: \"100%\",\n    height: 40,\n    marginY: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Table.Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Table.TextHeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 29\n    }\n  }, \"First Name\"), /*#__PURE__*/React.createElement(Table.TextHeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Table.TextHeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, \"City\"), /*#__PURE__*/React.createElement(Table.TextHeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }\n  }, \"State\")), /*#__PURE__*/React.createElement(Table.Body, {\n    height: 700,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }, searchResults.map(person => {\n    const city = person.city !== null ? person.city : ' N/A'; // some users have missing information\n\n    const state = person.state !== null ? person.state : ' N/A'; // set missing city and state info to be N/A\n\n    return /*#__PURE__*/React.createElement(Link, {\n      to: '/' + person.id,\n      key: person.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Table.Row, {\n      isSelectable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Table.TextCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 37\n      }\n    }, `${person.first_name} ${person.last_name}`), /*#__PURE__*/React.createElement(Table.TextCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 37\n      }\n    }, person.email), /*#__PURE__*/React.createElement(Table.TextCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 37\n      }\n    }, city), /*#__PURE__*/React.createElement(Table.TextCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 37\n      }\n    }, state)));\n  })))));\n};\n\nexport default TableComponent;","map":{"version":3,"sources":["/Users/omurbeknazarov/Desktop/verodin/src/components/TableComponent.js"],"names":["React","useContext","useState","useEffect","PeopleContext","Link","Table","SearchInput","TableComponent","data","searchTerm","setSearchTerm","searchResults","setSearchResults","handleChange","event","target","value","results","filter","person","first_name","toLowerCase","includes","map","city","state","id","last_name","email"],"mappings":"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","sourcesContent":["import React,{useContext, useState, useEffect} from 'react';\nimport {PeopleContext} from '../contexts/PeopleContextProvider';\nimport {Link} from 'react-router-dom';\nimport '../index.css';\nimport {Table,SearchInput} from 'evergreen-ui'\n\n\nconst TableComponent = () => {\n    const {data} = useContext(PeopleContext); // get json data from PeopleContext provider\n    const [searchTerm, setSearchTerm] = useState(\"\"); // initialize search term state and its method\n    const [searchResults, setSearchResults] = useState([]); // what data to display based on search\n    \n    const handleChange = event => {setSearchTerm(event.target.value)}; // use setSearchTerm to set searchTerm based on user's input\n\n    useEffect(() => {\n        const results = data.filter(person => person.first_name.toLowerCase().includes(searchTerm));\n        setSearchResults(results);\n    }, [data, searchTerm]);// this runs before first mounting and rerenders the component only if content in {data} or {searchTerm} get changed\n\n        return(\n            <div className=\"table-component\">\n                <div className=\"table-wrapper\">\n                    <Table elevation={2} border='muted'> {/*adds shadows around table*/}\n                        <SearchInput placeholder=\"filter name ...\"\n                            onChange={handleChange}\n                            value={searchTerm}  \n                            width=\"100%\"\n                            height={40}\n                            marginY={10}\n                        />\n                        <Table.Head>\n                            <Table.TextHeaderCell>\n                                First Name\n                            </Table.TextHeaderCell>\n                            <Table.TextHeaderCell>\n                                Email\n                            </Table.TextHeaderCell>\n                            <Table.TextHeaderCell>\n                                City\n                            </Table.TextHeaderCell>\n                            <Table.TextHeaderCell>\n                                State\n                            </Table.TextHeaderCell>\n                        </Table.Head>\n\n                        <Table.Body height={700}>\n                            {searchResults.map(person => {\n                                const city = person.city !== null ? person.city : ' N/A'; // some users have missing information\n                                const state = person.state !== null ? person.state : ' N/A'; // set missing city and state info to be N/A\n                            return(\n                                <Link to={'/' + person.id} key={person.id}>{/*passing person.id as {:_id} in App.js.Implementation for url para comment in App.js*/}\n                                <Table.Row isSelectable >\n                                    <Table.TextCell>{`${person.first_name} ${person.last_name}`}</Table.TextCell>\n                                    <Table.TextCell>{person.email}</Table.TextCell>\n                                    <Table.TextCell>{city}</Table.TextCell>\n                                    <Table.TextCell>{state}</Table.TextCell>\n                                </Table.Row>\n                            </Link>\n                            )\n                            })}\n                        </Table.Body>\n                    </Table>\n                </div>\n        </div>\n        )\n}\nexport default TableComponent;"]},"metadata":{},"sourceType":"module"}